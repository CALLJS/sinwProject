{"version":3,"sources":["../../../../work/magiccube/js/MagicCube.js"],"names":["MagicCube","center","side","factorial","facecolor","refVertex","allCube","magicfaces","closelist","i","face","centervertex","axis","Math","floor","axisDistance","fb","x","y","z","n","distance1","vertex","m","distance2","cube","getId","isFaceCenter","faceDir","push","magicface","ctx","dx","dy","clearRect","cubes","sort","a","b","length","render","sortarr","forEach","val","index","isTopDis","order","theta","phi","rotate","j","rotateFace","distance","getDistance","getTop9","getFaceCenter","vertex2","x2","pow","y2","z2","sqrt","que","foperator","arr","slice","zbCenter","dis","dis2"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;IAEaA,S,WAAAA,S;AACT,uBAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,SAA1B,EAAqC;AAAA;;AACjC;AACA,aAAKF,MAAL,GAAcA,MAAd;;AAEA;AACA,aAAKC,IAAL,GAAYA,IAAZ;;AAEA;AACA,aAAKC,SAAL,GAAiBA,SAAjB;;AAEA;AACA,aAAKC,SAAL,GAAiB,CAAC,wBAAD,EAA2B,sBAA3B,EAAmD,sBAAnD,EAA2E,sBAA3E,EACb,uBADa,EACY,uBADZ,CAAjB;;AAGA;AACA,aAAKC,SAAL,GAAiB;AACb,eAAE,mBAAW,CAAC,IAAZ,EAAiB,CAAjB,EAAmB,CAAnB,CADW;AAEb,eAAE,mBAAW,IAAX,EAAgB,CAAhB,EAAkB,CAAlB,CAFW;AAGb,eAAE,mBAAW,CAAX,EAAa,CAAC,IAAd,EAAmB,CAAnB,CAHW;AAIb,eAAE,mBAAW,CAAX,EAAa,IAAb,EAAkB,CAAlB,CAJW;AAKb,eAAE,mBAAW,CAAX,EAAa,CAAb,EAAe,CAAC,IAAhB,CALW;AAMb,eAAE,mBAAW,CAAX,EAAa,CAAb,EAAe,IAAf;AANW,SAAjB;AASH;AACD;;;;;;;mCAGW;AACP,gBAAIJ,SAAS,KAAKA,MAAlB;AACA,gBAAIK,UAAU,EAAd;AACA,gBAAIC,aAAa,EAAjB;AACA,gBAAIC,YAAY,EAAhB;AACA;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AACxB,oBAAIC,OAAO,EAAX;AACA,oBAAIC,eAAe,IAAnB;AACA,oBAAIC,OAAOC,KAAKC,KAAL,CAAWL,IAAI,CAAf,IAAoB,CAA/B,CAHwB,CAGS;AACjC,oBAAIM,eAAe,CAAC,KAAKZ,SAAL,GAAiB,CAAlB,IAAuB,KAAKD,IAA5B,GAAmC,CAAtD;AACA,oBAAIc,KAAKP,IAAI,CAAJ,IAAS,CAAT,GAAa,CAAb,GAAiB,CAAC,CAA3B;AACA,wBAAQG,IAAR;AACI,yBAAK,CAAL;AACID,uCAAe,mBAAWV,OAAOgB,CAAP,GAAWF,eAAeC,EAArC,EAAyCf,OAAOiB,CAAhD,EAAmDjB,OAAOkB,CAA1D,CAAf;AACA;AACJ,yBAAK,CAAL;AACIR,uCAAe,mBAAWV,OAAOgB,CAAlB,EAAqBhB,OAAOiB,CAAP,GAAWH,eAAeC,EAA/C,EAAmDf,OAAOkB,CAA1D,CAAf;AACA;AACJ,yBAAK,CAAL;AACIR,uCAAe,mBAAWV,OAAOgB,CAAlB,EAAqBhB,OAAOiB,CAA5B,EAA+BjB,OAAOkB,CAAP,GAAWJ,eAAeC,EAAzD,CAAf;AACA;AACJ;AACI;AAXR;AAaA;AACA,qBAAK,IAAII,IAAI,KAAKjB,SAAlB,EAA6BiB,IAAI,KAAKjB,SAAT,IAAsB,CAAnD,EAAsDiB,IAAIA,IAAI,CAA9D,EAAiE;AAC7D,wBAAIC,YAAY,CAACD,IAAI,CAAL,IAAU,KAAKlB,IAAf,GAAsB,CAAtC;AACA,wBAAIoB,SAAS,IAAb;AACA,yBAAK,IAAIC,IAAI,KAAKpB,SAAlB,EAA6BoB,IAAI,KAAKpB,SAAT,IAAsB,CAAnD,EAAsDoB,IAAIA,IAAI,CAA9D,EAAiE;AAC7D,4BAAIC,YAAY,CAACD,IAAI,CAAL,IAAU,KAAKrB,IAAf,GAAsB,CAAtC;AACA,gCAAQU,IAAR;AACI,iCAAM,CAAN;AACIU,yCAAS,mBAAWX,aAAaM,CAAb,GAAiBI,SAA5B,EAAuCV,aAAaO,CAAb,GAAiBM,SAAxD,EAAmEb,aAAaQ,CAAhF,CAAT;AACA;AACJ,iCAAM,CAAN;AACIG,yCAAS,mBAAWX,aAAaM,CAAb,GAAiBI,SAA5B,EAAuCV,aAAaO,CAApD,EAAuDP,aAAaQ,CAAb,GAAiBK,SAAxE,CAAT;AACA;AACJ,iCAAM,CAAN;AACIF,yCAAS,mBAAWX,aAAaM,CAAxB,EAA2BN,aAAaO,CAAb,GAAiBG,SAA5C,EAAuDV,aAAaQ,CAAb,GAAiBK,SAAxE,CAAT;AACA;AACJ;AACI;AAXR;AAaA,4BAAIC,OAAO,IAAX;AACA,4BAAIjB,UAAUc,OAAOI,KAAP,EAAV,CAAJ,EAA+B;AAC3BD,mCAAOjB,UAAUc,OAAOI,KAAP,EAAV,CAAP;AACH,yBAFD,MAEO;AACHD,mCAAO,eAASH,MAAT,EAAiB,KAAKpB,IAAL,GAAY,CAA7B,CAAP;AACA,gCAAGmB,aAAa,CAAb,IAAkBG,aAAa,CAAlC,EAAoC;AAChCC,qCAAKE,YAAL,GAAoB,IAApB;AACAF,qCAAKG,OAAL,GAAenB,CAAf;AACH;AACDH,oCAAQuB,IAAR,CAAaJ,IAAb;AACAjB,sCAAUc,OAAOI,KAAP,EAAV,IAA4BD,IAA5B;AACH;AACDf,6BAAKmB,IAAL,CAAUJ,IAAV;AAEH;AACJ;AACD,oBAAIK,YAAY,yBAAcpB,IAAd,EAAoBC,YAApB,EAAkCF,CAAlC,EAAqC,KAAKL,SAAL,CAAeK,CAAf,CAArC,CAAhB;AACAF,2BAAWsB,IAAX,CAAgBC,SAAhB;AACH;AACD,iBAAKvB,UAAL,GAAkBA,UAAlB;AACA,iBAAKD,OAAL,GAAeA,OAAf;AACH;;AAED;;;;;;kCAGUyB,G,EAAKC,E,EAAIC,E,EAAI;AACnBF,gBAAIG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,IAAIF,EAAxB,EAA4B,IAAIC,EAAhC;AACA,gBAAIE,QAAQ,KAAK7B,OAAjB;AACA6B,kBAAMC,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACvB,oBAAID,EAAEpC,MAAF,CAASiB,CAAT,GAAaoB,EAAErC,MAAF,CAASiB,CAAtB,GAA0B,CAA9B,EAAiC;AAC7B,2BAAO,CAAP;AACH,iBAFD,MAEK;AACD,2BAAO,CAAC,CAAR;AACH;AACJ,aAND;;AAQA,iBAAK,IAAIT,IAAI,CAAb,EAAgBA,IAAI,KAAKH,OAAL,CAAaiC,MAAjC,EAAyC9B,GAAzC,EAA8C;AAC1C0B,sBAAM1B,CAAN,EAAS+B,MAAT,CAAgBT,GAAhB,EAAqBC,EAArB,EAAyBC,EAAzB;AACH;AAEJ;;AAED;;;;;;sCAGcF,G,EAAKC,E,EAAIC,E,EAAI;AACvBF,gBAAIG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,IAAIF,EAAxB,EAA4B,IAAIC,EAAhC;AACA,gBAAIE,QAAQ,KAAK7B,OAAjB;AACA,gBAAImC,UAAU,EAAd;AACAN,kBAAMC,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACvB,oBAAID,EAAEpC,MAAF,CAASiB,CAAT,GAAaoB,EAAErC,MAAF,CAASiB,CAAtB,GAA0B,CAA9B,EAAiC;AAC7B,2BAAO,CAAP;AACH,iBAFD,MAEK;AACD,2BAAO,CAAC,CAAR;AACH;AACJ,aAND;;AAQA;AACAiB,kBAAMO,OAAN,CAAc,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAChC,oBAAGD,IAAIE,QAAP,EAAgB;AACZJ,4BAAQZ,IAAR,CAAac,GAAb;AACH;AACJ,aAJD;;AAMA;AACA,gBAAGF,QAAQ,CAAR,EAAWK,KAAX,IAAoB,CAAC,CAArB,IAA0BL,QAAQ,CAAR,EAAWK,KAAX,IAAoB,CAAjD,EAAmD;AAC/C,qBAAK,IAAIrC,IAAI,CAAb,EAAgBA,IAAIgC,QAAQF,MAA5B,EAAoC9B,GAApC,EAAyC;AACrCgC,4BAAQhC,CAAR,EAAW+B,MAAX,CAAkBT,GAAlB,EAAuBC,EAAvB,EAA2BC,EAA3B;AACH;AACJ;AACD,iBAAK,IAAIxB,KAAI,CAAb,EAAgBA,KAAI,KAAKH,OAAL,CAAaiC,MAAjC,EAAyC9B,IAAzC,EAA8C;AAC1C,oBAAG,KAAKH,OAAL,CAAaG,EAAb,EAAgBoC,QAAnB,EAA4B;AACxB;AACH;AACDV,sBAAM1B,EAAN,EAAS+B,MAAT,CAAgBT,GAAhB,EAAqBC,EAArB,EAAyBC,EAAzB;AACH;AACD;AACA,gBAAGQ,QAAQ,CAAR,EAAWK,KAAX,IAAoB,CAAC,CAArB,IAA0BL,QAAQ,CAAR,EAAWK,KAAX,GAAmB,CAAhD,EAAkD;AAC9C,qBAAK,IAAIrC,MAAI,CAAb,EAAgBA,MAAIgC,QAAQF,MAA5B,EAAoC9B,KAApC,EAAyC;AACrCgC,4BAAQhC,GAAR,EAAW+B,MAAX,CAAkBT,GAAlB,EAAuBC,EAAvB,EAA2BC,EAA3B;AACH;AACJ;AACJ;;AAED;;;;;;+BAGOhC,M,EAAQ8C,K,EAAOC,G,EAAK;AACvB,iBAAK,IAAIvC,IAAI,CAAb,EAAgBA,IAAI,KAAKH,OAAL,CAAaiC,MAAjC,EAAyC9B,GAAzC,EAA8C;AAC1C,qBAAKH,OAAL,CAAaG,CAAb,EAAgBwC,MAAhB,CAAuBhD,MAAvB,EAA+B8C,KAA/B,EAAsCC,GAAtC;AACA;AACA,oBAAG,KAAK1C,OAAL,CAAaG,CAAb,EAAgBkB,YAAnB,EAAgC;AAC5B,yBAAKpB,UAAL,CAAgB,KAAKD,OAAL,CAAaG,CAAb,EAAgBmB,OAAhC,EAAyC3B,MAAzC,GAAkD,KAAKK,OAAL,CAAaG,CAAb,EAAgBR,MAAlE;AACH;AACJ;AACD;AACA,iBAAK,IAAIiD,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AACxB,qBAAK7C,SAAL,CAAe6C,CAAf,EAAkBD,MAAlB,CAAyBhD,MAAzB,EAAiC8C,KAAjC,EAAwCC,GAAxC;AACH;AAEJ;;AAED;;;;;;mCAGWD,K,EAAOC,G,EAAKvC,C,EAAG;AACtB;AACA;AACAA,cAAE0C,UAAF,CAAa,KAAKlD,MAAlB,EAA0B8C,KAA1B,EAAiCC,GAAjC;AAEH;;AAED;;;;;;uCAGe;AAAA;;AACX,iBAAK1C,OAAL,CAAaoC,OAAb,CAAqB,UAACC,GAAD,EAAMC,KAAN,EAAc;AAC/B,qBAAK,IAAInC,IAAI,CAAb,EAAeA,IAAE,CAAjB,EAAmBA,GAAnB,EAAuB;AACnBkC,wBAAIS,QAAJ,CAAa3C,CAAb,IAAkB,MAAK4C,WAAL,CAAiBV,IAAI1C,MAArB,EAA4B,MAAKI,SAAL,CAAeI,CAAf,CAA5B,CAAlB;AACH;AACJ,aAJD;AAKA,iBAAK,IAAIyC,IAAI,CAAb,EAAeA,IAAE,CAAjB,EAAmBA,GAAnB,EAAuB;AACnB,qBAAK3C,UAAL,CAAgB2C,CAAhB,EAAmBf,KAAnB,GAA2B,KAAKmB,OAAL,CAAaJ,CAAb,CAA3B;AACA,qBAAK3C,UAAL,CAAgB2C,CAAhB,EAAmBjD,MAAnB,GAA4B,KAAKsD,aAAL,CAAmB,KAAKhD,UAAL,CAAgB2C,CAAhB,EAAmBf,KAAtC,EAA6ClC,MAAzE;AACH;AACJ;;AAED;;;;;;;;oCAKYqB,M,EAAOkC,O,EAAQ;AACvB,gBAAIC,KAAK5C,KAAK6C,GAAL,CAASpC,OAAOL,CAAP,GAAWuC,QAAQvC,CAA5B,EAA8B,CAA9B,CAAT;AACA,gBAAI0C,KAAK9C,KAAK6C,GAAL,CAASpC,OAAOJ,CAAP,GAAWsC,QAAQtC,CAA5B,EAA8B,CAA9B,CAAT;AACA,gBAAI0C,KAAK/C,KAAK6C,GAAL,CAASpC,OAAOH,CAAP,GAAWqC,QAAQrC,CAA5B,EAA8B,CAA9B,CAAT;AACA,mBAAON,KAAKgD,IAAL,CAAUJ,KAAKE,EAAL,GAAUC,EAApB,CAAP;AACH;;AAED;;;;;;;;gCAKQnD,C,EAAE;AACN,gBAAIqD,MAAM,iCAAkB,KAAKC,SAAL,CAAetD,CAAf,CAAlB,CAAV;AACA,iBAAKH,OAAL,CAAaoC,OAAb,CAAqB,UAACC,GAAD,EAAMC,KAAN,EAAc;AAC/BkB,oBAAIjC,IAAJ,CAASc,GAAT;AACH,aAFD;AAGA,mBAAOmB,IAAIE,GAAJ,CAAQC,KAAR,CAAc,CAAd,EAAgB,CAAhB,CAAP;AACH;;AAED;;;;;;;sCAIc9B,K,EAAM;AAChB,gBAAI+B,WAAW,oBAAf;AACA,gBAAIjE,MAAJ;AACA,gBAAIkE,MAAM,MAAV;AACA,iBAAK,IAAI1D,IAAI,CAAb,EAAeA,IAAE0B,MAAMI,MAAvB,EAA8B9B,GAA9B,EAAkC;AAC9B,oBAAI2D,OAAO,KAAKf,WAAL,CAAiBlB,MAAM1B,CAAN,EAASR,MAA1B,EAAiCiE,QAAjC,CAAX;AACA,oBAAGE,OAAOD,GAAV,EAAc;AACVA,0BAAMC,IAAN;AACAnE,6BAASkC,MAAM1B,CAAN,CAAT;AACH;AACJ;AACD,mBAAOR,MAAP;AACH;;AAED;;;;;;kCAGUQ,C,EAAE;AACR,mBAAQ,UAAC4B,CAAD,EAAGC,CAAH,EAAO;AACX,uBAAOD,EAAEe,QAAF,CAAW3C,CAAX,IAAgB6B,EAAEc,QAAF,CAAW3C,CAAX,CAAvB;AACH,aAFD;AAGH","file":"MagicCube.js","sourcesContent":["import {Vertex} from \"./Vertex.js\"\r\nimport {Cube} from \"./Cube.js\";\r\nimport {MagicFace} from \"./MagicFace.js\";\r\nimport {PriorityQueue} from \"../../../common/datastructures/PriorityQueue.js\";\r\n\r\nexport class MagicCube {\r\n    constructor(center, side, factorial) {\r\n        //中心\r\n        this.center = center;\r\n\r\n        //单位立方体的边长\r\n        this.side = side;\r\n\r\n        //阶乘\r\n        this.factorial = factorial;\r\n\r\n        //初始化颜色 白 蓝 红 绿 黄  橙色\r\n        this.facecolor = ['rgba(227, 236, 236, 1)', 'rgba(0, 150, 255, 1)', 'rgba(158, 63, 34, 1)', 'rgba(41, 222, 80, 1)',\r\n            'rgba(231, 234, 32, 1)', 'rgba(226, 131, 14, 1)'];\r\n\r\n        //6个面无穷远处的参考点，本例使用1000作为无穷远\r\n        this.refVertex = {\r\n            0:new Vertex(-1000,0,0),\r\n            1:new Vertex(1000,0,0),\r\n            2:new Vertex(0,-1000,0),\r\n            3:new Vertex(0,1000,0),\r\n            4:new Vertex(0,0,-1000),\r\n            5:new Vertex(0,0,1000)\r\n        };\r\n\r\n    }\r\n    /**\r\n     * 已center为中心初始化魔方 6个方向（012345）的6个面 26个方块.\r\n     */\r\n    initCube() {\r\n        let center = this.center;\r\n        let allCube = [];\r\n        let magicfaces = [];\r\n        let closelist = {};\r\n        //6个面的中心点\r\n        for (let i = 0; i < 6; i++) {\r\n            let face = [];\r\n            let centervertex = null;\r\n            let axis = Math.floor(i / 2) + 1;// 1X轴 2Y轴 3Z轴\r\n            let axisDistance = (this.factorial - 1) * this.side / 2;\r\n            let fb = i % 2 == 1 ? 1 : -1;\r\n            switch (axis) {\r\n                case 1:\r\n                    centervertex = new Vertex(center.x + axisDistance * fb, center.y, center.z);\r\n                    break;\r\n                case 2:\r\n                    centervertex = new Vertex(center.x, center.y + axisDistance * fb, center.z);\r\n                    break;\r\n                case 3:\r\n                    centervertex = new Vertex(center.x, center.y, center.z + axisDistance * fb);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            //其中一个面的N*N个立方体\r\n            for (let n = this.factorial; n + this.factorial != 0; n = n - 2) {\r\n                var distance1 = (n - 1) * this.side / 2;\r\n                let vertex = null;\r\n                for (let m = this.factorial; m + this.factorial != 0; m = m - 2) {\r\n                    var distance2 = (m - 1) * this.side / 2;\r\n                    switch (axis) {\r\n                        case  3:\r\n                            vertex = new Vertex(centervertex.x + distance1, centervertex.y + distance2, centervertex.z);\r\n                            break;\r\n                        case  2:\r\n                            vertex = new Vertex(centervertex.x + distance1, centervertex.y, centervertex.z + distance2);\r\n                            break;\r\n                        case  1:\r\n                            vertex = new Vertex(centervertex.x, centervertex.y + distance1, centervertex.z + distance2);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    var cube = null;\r\n                    if (closelist[vertex.getId()]) {\r\n                        cube = closelist[vertex.getId()];\r\n                    } else {\r\n                        cube = new Cube(vertex, this.side - 6);\r\n                        if(distance1 == 0 && distance2 == 0){\r\n                            cube.isFaceCenter = true;\r\n                            cube.faceDir = i;\r\n                        }\r\n                        allCube.push(cube)\r\n                        closelist[vertex.getId()] = cube;\r\n                    }\r\n                    face.push(cube);\r\n\r\n                }\r\n            }\r\n            var magicface = new MagicFace(face, centervertex, i, this.facecolor[i]);\r\n            magicfaces.push(magicface);\r\n        }\r\n        this.magicfaces = magicfaces;\r\n        this.allCube = allCube;\r\n    }\r\n\r\n    /**\r\n     * 渲染所有立方体，按Y从小到大渲染\r\n     */\r\n    renderAll(ctx, dx, dy) {\r\n        ctx.clearRect(0, 0, 2 * dx, 2 * dy);\r\n        let cubes = this.allCube;\r\n        cubes.sort(function (a, b) {\r\n            if (a.center.y - b.center.y > 0) {\r\n                return 1;\r\n            }else{\r\n                return -1;\r\n            }\r\n        })\r\n\r\n        for (let i = 0; i < this.allCube.length; i++) {\r\n            cubes[i].render(ctx, dx, dy);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 渲染所有立方体，根据旋转面所处的排序做特殊处理\r\n     */\r\n    renderFaceAll(ctx, dx, dy) {\r\n        ctx.clearRect(0, 0, 2 * dx, 2 * dy);\r\n        let cubes = this.allCube;\r\n        let sortarr = [];\r\n        cubes.sort(function (a, b) {\r\n            if (a.center.y - b.center.y > 0) {\r\n                return 1;\r\n            }else{\r\n                return -1;\r\n            }\r\n        })\r\n\r\n        //找出旋转面的cube\r\n        cubes.forEach(function (val, index) {\r\n            if(val.isTopDis){\r\n                sortarr.push(val)\r\n            }\r\n        });\r\n\r\n        //当旋转面处于后方的3面时，先渲染\r\n        if(sortarr[0].order != -1 && sortarr[0].order <= 2){\r\n            for (let i = 0; i < sortarr.length; i++) {\r\n                sortarr[i].render(ctx, dx, dy);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.allCube.length; i++) {\r\n            if(this.allCube[i].isTopDis){\r\n                continue;\r\n            }\r\n            cubes[i].render(ctx, dx, dy);\r\n        }\r\n        //当旋转面处于前方的3面时，后渲染\r\n        if(sortarr[0].order != -1 && sortarr[0].order > 2){\r\n            for (let i = 0; i < sortarr.length; i++) {\r\n                sortarr[i].render(ctx, dx, dy);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 旋转所有立方体，旋转参考点\r\n     */\r\n    rotate(center, theta, phi) {\r\n        for (let i = 0; i < this.allCube.length; i++) {\r\n            this.allCube[i].rotate(center, theta, phi);\r\n            //更新面的中心\r\n            if(this.allCube[i].isFaceCenter){\r\n                this.magicfaces[this.allCube[i].faceDir].center = this.allCube[i].center;\r\n            }\r\n        }\r\n        //更新参考点\r\n        for (let j = 0; j < 6; j++) {\r\n            this.refVertex[j].rotate(center, theta, phi);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 旋转某个面\r\n     */\r\n    rotateFace(theta, phi, i) {\r\n        // let magicfaces = this.magicfaces;\r\n        // magicfaces[i].rotateFace(this.center, theta, phi);\r\n        i.rotateFace(this.center, theta, phi);\r\n\r\n    }\r\n\r\n    /**\r\n     * 单一面旋转后交换面的成员.\r\n     */\r\n    swapFaceCube() {\r\n        this.allCube.forEach((val, index)=>{\r\n            for (var i = 0;i<6;i++){\r\n                val.distance[i] = this.getDistance(val.center,this.refVertex[i]);\r\n            }\r\n        });\r\n        for (var j = 0;j<6;j++){\r\n            this.magicfaces[j].cubes = this.getTop9(j);\r\n            this.magicfaces[j].center = this.getFaceCenter(this.magicfaces[j].cubes).center;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取两个点之间的直线距离.\r\n     * @param vertex\r\n     * @param vertex2\r\n     */\r\n    getDistance(vertex,vertex2){\r\n        var x2 = Math.pow(vertex.x - vertex2.x,2);\r\n        var y2 = Math.pow(vertex.y - vertex2.y,2);\r\n        var z2 = Math.pow(vertex.z - vertex2.z,2);\r\n        return Math.sqrt(x2 + y2 + z2);\r\n    }\r\n\r\n    /**\r\n     * 获取i面的成员 即距离i面参考点最近的9个方块.\r\n     * @param vertex\r\n     * @param vertex2\r\n     */\r\n    getTop9(i){\r\n        var que = new PriorityQueue(this.foperator(i));\r\n        this.allCube.forEach((val, index)=>{\r\n            que.push(val);\r\n        })\r\n        return que.arr.slice(0,9);\r\n    }\r\n\r\n    /**\r\n     * 获取面的中点 即 这个面距离原点（0，0，0）最近的点\r\n     * @param cubes\r\n     */\r\n    getFaceCenter(cubes){\r\n        var zbCenter = new Vertex();\r\n        var center;\r\n        var dis = 100000;\r\n        for (var i = 0;i<cubes.length;i++){\r\n            var dis2 = this.getDistance(cubes[i].center,zbCenter);\r\n            if(dis2 < dis){\r\n                dis = dis2;\r\n                center = cubes[i];\r\n            }\r\n        }\r\n        return center;\r\n    }\r\n\r\n    /**\r\n     * 返回优先队列的比较器\r\n     */\r\n    foperator(i){\r\n        return  (a,b)=>{\r\n            return a.distance[i] < b.distance[i];\r\n        };\r\n    }\r\n\r\n}"]}