{"version":3,"sources":["../../../../work/cube/js/Cube.js"],"names":["Cube","center","side","d","vertices","x","y","z","facecolor","faces","ctx","dx","dy","clearRect","len","length","sort","a","b","aIndex","bIndex","j","face","beginPath","k","n_vertices","P","project","moveTo","lineTo","closePath","stroke","fill","vertex"],"mappings":"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","file":"Cube.js","sourcesContent":["import {Vertex} from './Vertex.js';\r\nexport class Cube {\r\n\r\n    constructor(center, side){\r\n        //中心\r\n        this.center = center;\r\n\r\n        //边长\r\n        this.side = side;\r\n\r\n        //半径\r\n        var d = side/2;\r\n\r\n        //8个点\r\n        this.vertices = [\r\n            new Vertex(center.x - d, center.y - d, center.z + d),\r\n            new Vertex(center.x - d, center.y - d, center.z - d),\r\n            new Vertex(center.x + d, center.y - d, center.z - d),\r\n            new Vertex(center.x + d, center.y - d, center.z + d),\r\n            new Vertex(center.x + d, center.y + d, center.z + d),\r\n            new Vertex(center.x + d, center.y + d, center.z - d),\r\n            new Vertex(center.x - d, center.y + d, center.z - d),\r\n            new Vertex(center.x - d, center.y + d, center.z + d)\r\n        ];\r\n\r\n        //白 蓝 红 绿 黄  橙色\r\n        this.facecolor = ['rgba(227, 236, 236, 1)','rgba(0, 150, 255, 1)','rgba(158, 63, 34, 1)','rgba(41, 222, 80, 1)',\r\n            'rgba(231, 234, 32, 1)','rgba(226, 131, 14, 1)'];\r\n\r\n        //6个面\r\n        this.faces = [\r\n            [this.vertices[0], this.vertices[1], this.vertices[2], this.vertices[3]],\r\n            [this.vertices[3], this.vertices[2], this.vertices[5], this.vertices[4]],\r\n            [this.vertices[4], this.vertices[5], this.vertices[6], this.vertices[7]],\r\n            [this.vertices[7], this.vertices[6], this.vertices[1], this.vertices[0]],\r\n            [this.vertices[7], this.vertices[0], this.vertices[3], this.vertices[4]],\r\n            [this.vertices[1], this.vertices[6], this.vertices[5], this.vertices[2]]\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * 将自己立方体渲染在canvas上(Y轴垂直于屏幕).\r\n     * @param ctx canvas对象\r\n     * @param dx canvas起点相对立方体中心的x距离\r\n     * @param dy canvas起点相对立方体中心的y距离\r\n     */\r\n    render(ctx, dx, dy){\r\n        ctx.clearRect(0, 0, 2*dx, 2*dy);\r\n        var faces = this.faces,len = this.faces.length;\r\n        faces.sort(function(a, b) {\r\n            let aIndex = a[0].y + a[1].y + a[2].y +a[3].y;\r\n            let bIndex = b[0].y + b[1].y + b[2].y +b[3].y;\r\n            return aIndex - bIndex;\r\n        });\r\n        //遍历6个面\r\n        for (var j = 0; j < len; ++j) {\r\n            var face = faces[j];\r\n            //ctx.fillStyle = this.facecolor[1];\r\n            ctx.beginPath();\r\n\r\n            //连接4个点\r\n            for (var k = 0, n_vertices = face.length; k < n_vertices; ++k) {\r\n                var P = this.project(face[k]);\r\n                if(k == 0){\r\n                    ctx.moveTo(P.x + dx, P.y + dy);\r\n                }else{\r\n                    ctx.lineTo(P.x + dx, P.y + dy);\r\n                }\r\n\r\n            }\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 已Y轴为垂线将三维平面的点映射到二维平面.\r\n     * @param vertex vertex\r\n     */\r\n    project(vertex) {\r\n        return new Vertex(vertex.x, vertex.z);\r\n    }\r\n}"]}