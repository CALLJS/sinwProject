{"version":3,"sources":["../../../common/utils/MathUtil.js"],"names":["MathUtil","arr","length","fconst","getfactorialArr","x","n","i","smaller","j","num","f","sum","squaArr","notEmpty","row","k","targetRow","targetcol","col","Math","floor","abs","colsize","newarr","sliceArr","squaArrMDistance"],"mappings":"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","file":"MathUtil.js","sourcesContent":["//数学工具类,用于数学操作\r\nimport {BaseUtil} from \"./BaseUtil.js\";\r\n\r\nexport class MathUtil {\r\n\r\n    //将数组进行康托展开\r\n    static cantor(arr){\r\n        if(typeof arr != 'array' || arr.length == 0){\r\n            return -1;\r\n        }\r\n        let fconst = this.getfactorialArr(arr.length);\r\n        let x = 0;\r\n        let n = arr.length;\r\n        for (let i = 0; i < n; i++) {\r\n            let smaller = 0;  // 在当前位之后小于其的个数\r\n            for (let j = i + 1; j < n; j++) {\r\n                if (arr[j] < arr[i])\r\n                    smaller++;\r\n            }\r\n            x += fconst[n - i - 1] * smaller; // 康托展开累加\r\n        }\r\n        return x;  // 康托展开值\r\n    }\r\n\r\n    //返回num的阶乘数组\r\n    static getfactorialArr(num){\r\n        let f = [], sum = 1;\r\n        if (typeof num != 'number' || num < 0 || num > 100) {\r\n            return f;\r\n        }\r\n        f[0] = 1;\r\n        for (let i = 1; i <= num; i++) {\r\n            sum *= i;\r\n            f[i] = sum;\r\n        }\r\n        return f;\r\n    }\r\n\r\n    //返回num的阶乘\r\n    static getfactorial(num){\r\n        let  sum = 1;\r\n        if (typeof num != 'number' || num < 0 || num > 1000) {\r\n            return -1;\r\n        }\r\n        for (let i = 1; i <= num; i++) {\r\n            sum *= i;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * 返回矩形数组的曼哈顿距离\r\n    * @exapmle\r\n        * utils.squaArrMDistance([[1,2,3],[4,5,6],[7,8,0]);\r\n    * @param squaArr 矩阵数组\r\n    * @return 曼哈顿距离 num\r\n    */\r\n    static squaArrMDistance(squaArr){\r\n        if (!BaseUtil.notEmpty(squaArr)) {\r\n            return -1;\r\n        }\r\n        let row = squaArr.length, sum = 0, i, k, targetRow, targetcol;\r\n        let col = squaArr[0].length,j;\r\n        for (i = 0; i < row; i++) {\r\n            for (j = 0; j < col; j++){\r\n                if (squaArr[i][j] == 0) continue;\r\n                k = squaArr[i][j] - 1;\r\n                targetRow = Math.floor(k / col);\r\n                targetcol = k % row;\r\n                sum += Math.abs(targetRow - i) + Math.abs(targetcol - j);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * 返回矩形的曼哈顿距离.\r\n     * @param arr 目标数组\r\n     * @param col 列数量\r\n     * @return num\r\n     */\r\n    static ArrMDistance(arr, colsize) {\r\n        let newarr = BaseUtil.sliceArr(arr, colsize);\r\n         return this.squaArrMDistance(newarr);\r\n    }\r\n}"]}